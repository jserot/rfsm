#!/bin/bash


RFSMMAKE=/Users/jserot/Dev/ml/rfsm/etc/bin/rfsmmake
RFSMLIB=/Users/jserot/Dev/ml/rfsm/etc
RFSMBIN=/Users/jserot/Dev/ml/rfsm/_build/default/src/bin
IFS="/" read -ra PARTS <<< "$2"
GUEST="${PARTS[0]}"
RFSMC=$RFSMBIN/$GUEST/rfsmc.bc # Current version
RFSMC_PRE=/Applications/RfsmLight.app/Contents/MacOS/rfsmc # Previous version

# A script for automated testing 

try_make ()
{
case $1 in
dot) make dot.run;;
sim) make sim;;
sim.run) make sim.run;;
ctask) make ctask;;
systemc) make systemc;;
systemc.code) make systemc.code;;
systemc.run) make systemc.run;;
systemc.sim) make systemc.sim;;
vhdl.code) make vhdl.code;;
vhdl.run) make vhdl.run;;
vhdl.sim) make vhdl.sim;;
*) false;;
esac
case $? in
0) echo "OK";;
*) echo "FAILED";;
esac
}

function run
{
echo -n "  -> making $2 in $1 ... "
(cd $1; make $2) > /dev/null 2>&1
case $? in
0) echo -e "\033[32mOK\033[0m";;
*) failed=true; echo -e "\033[31mFAILED\033[0m"; (cd $1; make $2.clobber) > /dev/null 2>&1;;
esac
}

function check_results
{
echo -n "  -> checking $1 results ... "
(cd $1; make $2.check) > /dev/null 2>&1
case $? in
0)
  echo -e "\033[32mOK\033[0m";;
*)
 failed=true; echo -e "\033[31m** Checking of $2 results FAILED in $1\033[0m";;
esac
}

function make_test 
{
    failed=false
    (cd $1; make clobber) > $TMP 2>&1
    run $1 dot 
    run $1 sim
#    check_results $1 sim
    (cd $1; make clobber) > $TMP 2>&1
}

TMP=/tmp/do_test.out

make_all ()
{
    shift
    echo "** Testing all in $1... "
    make_test $1 2>&1
    if $failed ; then
        exit 0
    else
        exit 1
    fi
}

make_target ()
{
    echo -n "Testing $1 in $2... "
    (cd $2; if [ -e Makefile ]; then make clobber > $TMP 2>&1; fi)
    (cd $2; try_make $1 && make clean) > $TMP 2>&1
    grep "OK" $TMP >/dev/null && echo -e "\033[32mOK\033[0m"
    grep "FAILED" $TMP >/dev/null && echo -e "\033[31mFAILED\033[0m"
    grep "OK" $TMP >/dev/null && exit 1
    exit 0
}

make_target_comp () # For regression testing
{
    echo -n "Making $1 in $2 (with $RFSMC_PRE)..."
    (cd $2; $RFSMMAKE -lib $RFSMLIB -with-test-targets -no-confirm -compiler $RFSMC_PRE -o Makefile ./main.pro > $TMP 2>&1)
    case $1 in
        systemc) (cd $2; try_make $1.code) >> $TMP 2>&1;;
        vhdl) (cd $2; try_make $1.code) >> $TMP 2>&1;;
        *) (cd $2; try_make $1) >> $TMP 2>&1
    esac
    grep "OK" $TMP >/dev/null && echo -e "\033[32mOK\033[0m"
    grep "FAILED" $TMP >/dev/null && echo -e "\033[31mFAILED\033[0m"
    (cd $2; if [ -e ./$1 ]; then rm -rf ./$1.pre; cp -r ./$1 ./$1.pre; fi)
    (cd $2; $RFSMMAKE -lib $RFSMLIB -with-test-targets -no-confirm -compiler $RFSMC -o Makefile ./main.pro >> $TMP 2>&1)
    echo -n "Making $1 in $2 (with $RFSMC)..."
    case $1 in
        systemc) (cd $2; try_make $1.code) >> $TMP 2>&1;;
        vhdl) (cd $2; try_make $1.code) >> $TMP 2>&1;;
        *) (cd $2; try_make $1) >> $TMP 2>&1
    esac
    grep "OK" $TMP >/dev/null && echo -e "\033[32mOK\033[0m"
    grep "FAILED" $TMP >/dev/null && echo -e "\033[31mFAILED\033[0m"
    echo "Comparing results..."
    case $3 in
#        show) diff -B --unified=0 -r --exclude=Makefile $2/$1.pre $2/$1;;
        show) diff -d -B -r --exclude=Makefile $2/$1.pre $2/$1;;
        *) diff -q -d -B --unified=1 -r --exclude=Makefile $2/$1.pre $2/$1;;
    esac
#    rm -rf $2/$1.pre
}

make_makefile ()
{
    echo -n "Making Makefile in $1... "
    (cd $1; $RFSMMAKE -lib $RFSMLIB -with-test-targets -no-confirm -compiler $RFSMC -o Makefile ./main.pro > $TMP 2>&1)
    grep "Wrote Makefile" $TMP >/dev/null && echo -e "\033[32mOK\033[0m"
    grep "OK" $TMP >/dev/null && exit 1
    exit 0
}

case $1 in
usage) echo "./do_test (makefile|dot|sim|sim.run|ctask|systemc|systemc.code|systemc.run|systemc.sim|vhdl|vhdl.code|vhdl.run|vhdl.sim) subdir [comp] [show]";;
makefile) make_makefile $2;;
all) make_all $2;;
*) case $3 in
        comp) make_target_comp $1 $2 $4;;
        *) make_target $1 $2;;
    esac
esac
