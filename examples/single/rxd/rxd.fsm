# Serial to parallel converter (1 start bit, LSB->MSB, 1 parity bit, 1 stop bit)

type bit = int<1>

fsm model Rxd<n:int> ( # n gives the bit duration (in clk periods)
     in clk: event,
     in sin: bit,
    out dout: int<8>,
    out err: bool)
  {
  states: Idle, Sync, Rx ;
  vars:
    i: int<0:8>,
    k: int<0:n>,
    r: int<8>,
    p: int<1>;
  trans:
    Idle -- clk.sin=0 | r:=0; k:=0 -> Sync,
    Sync -- clk.k<n/2-1 | k:=k+1 -> Sync,
    Sync -- clk.k=n/2-1 | k:=0; i:=0; p:=0 -> Rx,
    Rx -- clk.k<n-1 | k:=k+1 -> Rx,
    Rx -- clk.(k=n-1).(i<8) | r[i]:=sin; p:=p^sin; k:=0; i:=i+1 -> Rx,
    Rx -- clk.(k=n-1).(i=8) | err:=p^sin=0?0:1; dout:=r -> Idle;
  itrans: -> Idle;
  }

