-- Given an integer [x0], computes the "time of flight" of [Syracuse(x0)]
-- The time of flight is defined as the number of iterations to reach value 1 (from which the sequence is cyclic)

fsm model syracuse(
  in h: event,
  in start: bool,
  in x0: int,
  out rdy: bool,
  out n: int)
{
  states: Repos where rdy=1, Calcul where rdy=0;
  vars: x: int, k: int;
  trans:
  | Repos -> Calcul on h when start=1 with x:=x0, k:=1
  | Calcul -> Calcul on h when (x!=1).(x % 2=0) with x:=x/2, k:=k+1
  | Calcul -> Calcul on h when (x!=1).(x % 2=1) with x:=3*x+1, k:=k+1
  | Calcul -> Repos on h when x=1 with n:=k;
  itrans:
  | -> Repos;
}

input H : event = periodic(10, 10, 200)
input x0 : int = value_changes(0:10)
input Start : bool = value_changes(0:0, 25:1, 35:0)
output Rdy : bool
output n : int

fsm c1 = syracuse(H,Start,x0,Rdy,n)
