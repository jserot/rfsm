library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library rfsm;
use rfsm.core.all;

entity syracuse is
  port(
        H: in std_logic;
        Start: in std_logic;
        u0: in unsigned(7 downto 0);
        Rdy: out std_logic;
        N: out unsigned(7 downto 0);
        rst: in std_logic
        );
end syracuse;

architecture RTL of syracuse is
  type t_state is ( Calcul, Repos );
  signal state: t_state;
  signal u: unsigned(7 downto 0);
  signal k: unsigned(7 downto 0);
begin
  process(rst, H)
  begin
    if ( rst='1' ) then
      state <= Repos;
      Rdy <= '1';
    elsif rising_edge(H) then 
      case state is
      when Repos =>
        if ( Start = '1' ) then
          u <= u0;
          k <= to_unsigned(1,8);
          Rdy <= '0';
          state <= Calcul;
        end if;
      when Calcul =>
        if ( u /= 1 and u mod 2 = 0 ) then
          u <= u/2;
          k <= k+1;
        elsif  ( u /= 1 and u mod 2 = 1 ) then
          u <= mul(to_unsigned(3,8),u)+1;
          k <= k+1;
        elsif  ( u = 1 ) then
          N <= k;
          Rdy <= '1';
          state <= Repos;
        end if;
    end case;
    end if;
  end process;
end RTL;
