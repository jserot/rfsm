-- A 2xn bit multiplier implemented with the classical shift-and-add algorithm
-- This is a generalisation of ../../../full3/single/mul8

fsm model mult <n: int, nn: int> (
  -- [nn] is supposed to be [2*n] but the type system is not powerful enough to express this
  in h: event,
  in start: bool,
  in n1: int<n>,
  in n2: int<n>,
  out r: int<nn>,
  out rdy: bool)
{
  states:
    Idle where rdy=1,
    Comp where rdy=0;
  vars:
    a: int<nn>,
    b: int<n>,
    i: int<0:n>, 
  acc: int<nn>;
  trans:
  | Idle -> Comp on h when start=1 with a:=n1::int<nn>, b:=n2, acc:=0::int<nn>, i:=0
  | Comp -> Comp on h when (i<n).(b[0]=1) with acc:=acc+a, a:=a<<1, b:=b>>1, i:=i+1
  | Comp -> Comp on h when (i<n).(b[0]=0) with a:=a<<1, b:=b>>1, i:=i+1
  | Comp -> Idle on h when i=n with r:=acc;
  itrans:
  | -> Idle;
}
