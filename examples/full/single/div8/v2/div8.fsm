# A optimized divider operation, giving results in a constant nbr of iterations

fsm model div8 (
  in h: event, 
  in start: bool,
  in n1: int<8>,
  in n2: int<8>,
  out rdy: bool,
  out r: int<8>)
 {
  states: Repos, Calcul;
  vars:
    a:int<16>,
    b:int<16>,
    c:int<8>,
    i:int<0:8>;
  trans:
    Repos -- h.start=1 | a:=n1::int<16>; b:=n2::int<16>*128; c:=0; rdy:=0; i:=0 -> Calcul,
    Calcul -- h.(i<8).(a>=b) | a:=a-b; c:=c*2+1; i:=i+1; b:=b/2 -> Calcul,
    Calcul -- h.(i<8).(a<b) | c:=c*2; i:=i+1; b:=b/2 -> Calcul,
    Calcul -- h.i=8 | r:=c; rdy:=1 -> Repos;
  itrans: | rdy:=1 -> Repos;
  }

input H : event = periodic (10,10,200)
input N1 : int<8> = value_changes (5:150, 45:0)
input N2 : int<8> = value_changes (5:25, 45:0)
input Start : bool = value_changes (0:0, 25:1, 35:0)
output Rdy : bool
output R : int<8>  

fsm d8 = div8 (H,Start,N1,N2,Rdy,R)
