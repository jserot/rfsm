# generated by rfsmmake -lib /Users/jserot/Dev/ml/rfsm/etc -with-test-targets -no-confirm -compiler /Users/jserot/Dev/ml/rfsm/_build/default/src/guests/others/simple/bin/rfsmc.bc -o Makefile ./main.pro

include /Users/jserot/Dev/ml/rfsm/etc/platform

LIBDIR=/Users/jserot/Dev/ml/rfsm/etc


RFSMC=/Users/jserot/Dev/ml/rfsm/_build/default/src/guests/others/simple/bin/rfsmc.bc
SRCS=heron.fsm main.fsm
DOT_OPTS=
SIM_OPTS=
SYSTEMC_OPTS=-sc_time_unit "SC_NS" -stop_time 200 -sc_double_float # WARNING -sc_double_float is required here !
VHDL_OPTS=-vhdl_time_unit "ns" -stop_time 200 

.PHONY: dot sim ctask systemc vhdl clean clobber test

ifndef (MAIN)
    MAIN=main
endif

all: dot sim ctask systemc vhdl

dot: dot.run dot.view

dot.run:
	mkdir -p ./dot
	$(RFSMC) $(GEN_OPTS) -dot -target_dir ./dot $(DOT_OPTS) $(SRCS)

dot.view:
	@$(eval files=`cat ./rfsm.output`)
	@for f in $(files); do \
		if [[ $$f = *.dot ]]; then \
			$(DOTVIEWER) $$f; \
		fi; \
	done

sim: sim.run sim.view

sim.run:
	mkdir -p ./sim
	$(RFSMC) $(GEN_OPTS) -sim $(SIM_OPTS) -target_dir ./sim $(SRCS)

sim.view:
	$(VCDVIEWER) ./sim/$(MAIN).vcd ./sim/$(MAIN).gtkw > /tmp/gtkwave.log 2>&1; echo $$?

ctask: ctask.code

ctask.code:
	mkdir -p ./ctask
	$(RFSMC) $(GEN_OPTS) -ctask $(CTASK_OPTS) -target_dir ./ctask $(SRCS)

ctask.view:
	@$(eval files=`cat ./rfsm.output`)
	@for f in $(files); do \
		if [[ $$f = *.c ]]; then \
			$(TXTVIEWER) $$f; \
		fi; \
	done

systemc: systemc.run systemc.view

systemc.code:
	mkdir -p ./systemc
	$(RFSMC) $(GEN_OPTS) -systemc $(SYSTEMC_OPTS) -target_dir ./systemc -lib $(LIBDIR) $(SRCS)

systemc.run: systemc.code
	if [ -d ./systemc ]; then cd ./systemc; make; make run; fi

systemc.view:
	if [ -d ./systemc ]; then cd ./systemc; make view; fi

systemc.sim: sim.run systemc.run
	$(VCDVIEWER) ./sim/$(MAIN).vcd ./sim/$(MAIN).gtkw > /tmp/gtkwave.log 2>&1 &
	if [ -d ./systemc ]; then cd ./systemc; make view; fi

vhdl:
	if [ -d ./vhdl ]; then make vhdl.all; fi

vhdl.all: vhdl.run vhdl.view

vhdl.code:
	if [ -d ./vhdl ]; then $(RFSMC) $(GEN_OPTS) -vhdl $(VHDL_OPTS) -target_dir ./vhdl -lib $(LIBDIR) $(SRCS); fi

vhdl.run: vhdl.code
	if [ -d ./vhdl ]; then cd ./vhdl; make; make run; fi

vhdl.view: 
	if [ -d ./vhdl ]; then cd ./vhdl; make view; fi

vhdl.sim: sim.run vhdl.run
	$(VCDVIEWER) ./sim/$(MAIN).vcd ./sim/$(MAIN).gtkw > /tmp/gtkwave.log 2>&1 &
	if [ -d ./vhdl ]; then cd ./vhdl; make view; fi

view:
	if [ -d ./vhdl ]; then make view3; else make view2; fi

view2:
	make sim.run
	make systemc.run
	$(VCDVIEWER) ./sim/$(TB).vcd ./sim/$(TB).vcd > /tmp/gtkwave.log 2>&1 &
	(cd ./systemc; make view) 

view3:
	make sim.run
	make systemc.run
	make vhdl.run
	$(VCDVIEWER) ./sim/$(TB).vcd ./sim/$(TB).vcd > /tmp/gtkwave.log 2>&1 &
	(cd ./systemc; make view) &
	(cd ./vhdl; make view) 

clean:
	\rm -f dot/*
	\rm -f ctask/*
	\rm -f sim/*.vcd
	if [ -f ./systemc/Makefile ]; then (cd ./systemc; make clean); else rm -f ./systemc/{*.o,tb,main_tb,main,core,*.vcd,*.ghw}; fi
	if [ -f ./vhdl/Makefile ]; then (cd ./vhdl; make clean); else rm -f ./vhdl/{work*.cf,*.o,tb,main_tb,*.vcd,*.ghw}; fi
	\rm -f *_deps.dot
	\rm -f *.output *.vcd
	\rm -rf *.pre

clobber: clean
	if [ -f ./systemc/Makefile ]; then (cd ./systemc; make clobber); else rm -f ./systemc/{*.cpp,*.h,Makefile,*~}; fi
	if [ -f ./vhdl/Makefile ]; then (cd ./vhdl; make clobber); else rm -f ./vhdl/{*.vhd,Makefile,*~}; fi
	\rm -f *~

all.test: dot.test sim.test ctask.test systemc.test vhdl.test

dot.test: dot.run

sim.test: sim.run

ctask.test: ctask.code

systemc.test: systemc.run

vhdl.test:
	if [ -d ./vhdl ]; then make vhdl.run; fi

test:
	if [ -d ./vhdl ]; then make test3; else make test2; fi

test2:
	make dot.run
	make sim.run
	make systemc.run

test3:
	make dot.run
	make sim.run
	make systemc.run
	make vhdl.run



