type digit = int<0:9>

fsm model Convert(
  in h: event, 
  in start: bool,
  in inp: int<8>,
  out rdy: bool,
  out d0: digit,
  out d1: digit,
  out d2: digit)
 {
  states: Idle, Convert;
  vars: r:int<20>, i:int<0:8>;
  trans:
    Idle -- h.start=1 | r:=inp; i:=0; rdy:=0 -> Convert,
    Convert -- h.i<8 | r[11:8] := r[11:8]>4?r[11:8]+3:r[11:8];
                       r[15:12] := r[15:12]>4?r[15:12]+3:r[15:12];
                       r[19:16] := r[19:16]>4?r[19:16]+3:r[19:16];
                       r := r<<1;
                       i := i+1 -> Convert,
    Convert -- h.i=8 | d2:=r[19:16]; d1:=r[15:12]; d0:=r[11:8]; rdy:=1 -> Idle;
  itrans: | rdy:=1 -> Idle;
  }

input h : event = periodic (10,10,200)
input n : int<8> = value_changes (5:243)
input start : bool = value_changes (0:0, 25:1, 35:0)
output rdy : bool
output d0 : digit
output d1 : digit
output d2 : digit

fsm conv = Convert(h,start,n,rdy,d0,d1,d2)
