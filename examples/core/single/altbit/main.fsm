-- Alternating bits checker 
-- Emits event on output [Err] whenever the current bit, read on input [E] when [H] occurs
-- is not the complement of the last one

-- First version, with three states and no local variable

fsm model altbit1(
  in h: event,
  in e: bool,
  out err: event)
{
  states: E0, E1, Init;
  trans:
  | E0 -> E0 on h when e=0 with err
  | E0 -> E1 on h when e=1
  | E1 -> E0 on h when e=0
  | E1 -> E1 on h when e=1 with err
  | Init -> E0 on h when e=0
  | Init -> E1 on h when e=1;
  itrans:
  | -> Init ;
}

-- Second version, with two states and a local variable

fsm model altbit2(
  in h: event,
  in e: bool,
  out err: event)
{
  states: Init, R;
  vars: last: bool;
  trans:
  | Init -> R on h when e=0 with last:=0
  | Init -> R on h when e=1 with last:=1
  | R -> R on h when last=e with err
  | R -> R on h when last!=e with last:=e;
  itrans:
  | -> Init ;
}

input H : event = periodic(10, 10, 110)
input E : bool = value_changes(5:0, 15:1, 25:0, 35:1, 45:1, 55:0, 65:1, 75:0, 85:0, 95:0, 105:1)
output Err1, Err2 : event

fsm a1 = altbit1(H,E,Err1)
fsm a2 = altbit2(H,E,Err2)
