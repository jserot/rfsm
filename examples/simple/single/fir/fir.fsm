-- 1x3 Finite Impulse Responde filter
-- y_i = a_0 * x_i + a_1 * x_{i-1} + a_2 * x_{i-2}

-- First version, with scalars for coeffs and buffering

fsm model fir1<a0:int, a1:int, a2:int>(
  in h: event,
  in x: int,
  out y: int)
{
  states: Run;
  vars: zx: int, zzx: int;
  trans:
  | Run -> Run on h with y:=a0*x+a1*zx+a2*zzx, zzx:=zx, zx:=x;
  itrans:
  | -> Run with zx:=0,zzx:=0;
}

-- Second version, with arrays for coeffs and buffering

fsm model fir2<a:int array[3]>(
  in h: event,
  in x: int,
  out y: int)
{
  states: Run;
  vars: z: int array[2];
  trans:
  | Run -> Run on h with y:=a[0]*x+a[1]*z[0]+a[2]*z[1], z[1]:=z[0], z[0]:=x;
  itrans:
  | -> Run with z[0]:=0,z[1]:=0;
}
